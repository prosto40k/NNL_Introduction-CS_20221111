Lesson 4. 3933 м(аргументы, ссылочный и значимый тип, switch)*
Базовые алгоритмы:
	ввод-вывод массива, массив из случайных чисел, сумма элементов массива, линейный поиск в массиве

40.Задать массив из 8 целых элементов и вывести их на экран
41.Задать массив из 8 элементов, заполненных нулями и единицами вывести их на экран
42.Задать массив из 12 элементов, заполненных числами из [-9, 9]. Найти сумму положительных/отрицательных элементов массива
43.Написать подпрограмму замены элементов целочисленного массива типа int на противоположные по значению. Подпрограмма принимает на вход массив и в нем же и меняет значения.
44.Определить, присутствует ли в заданном массиве, некоторое число
45.Задать массив, заполнить случайными положительными трёхзначными числами. Показать количество нечетных\четных чисел
46.В одномерном массиве из 123 чисел найти количество элементов из отрезка [10,99]
47.Найти сумму чисел одномерного массива стоящих на нечетной позиции
48.Задан массив a из N элементов. Заполнить массив случайными числами от 1 до 10. Создайте массив, который является произведением пар чисел в одномерном массиве a. Парой считаем первый и последний элемент, второй и предпоследний и т.д.
49.В Указанном массиве вещественных чисел найдите разницу между максимальным и минимальным элементом

Lesson 5. 4916 м (массивы с использованием подпрограмм, NET 5 и NET 6)*
Базовые алгоритмы:
	Переворот массива, Бинарный поиск в массиве, пузырьковая сортировка, сортировка выбором.

Разбивать программу на подпрограммы.

50.Выяснить являются ли три числа сторонами треугольника
51.С клавиатуры вводится число N. Затем вводятся N чисел. Определить сколько чисел больше 0 введено с клавиатуры
52.Написать программу преобразования десятичного числа в двоичное
53.Найти точку пересечения двух прямых заданных уравнением y = k1 * x + b1, y = k2 * x + b2, b1 k1 и b2 и k2 заданы
54.С клавиатуры вводится число N. Показать первые N чисел Фибоначчи. Принять первые числа равными 0 и 1
55.Написать программу масштабирования фигуры
Тут для тех кто далеко улетел, чтобы задавались вершины фигуры списком (одной строкой)
например: "(0,0) (2,0) (2,2) (0,2)"
коэффициент масштабирования k задавался отдельно - 2 или 4 или 0.5
В результате показать координаты, которые получатся.
при k = 2 получаем "(0,0) (4,0) (4,4) (0,4)"
56.Написать программу копирования массива
Lesson 6.(Двумерные массивы. Инициализация, ввод-вывод, обработка, поиск, сортировка)
Базовые алгоритмы:
	Ввод-вывод двумерного массива, поиск в двумерном массиве, сортировка двумерного массива(по колонкам, так как в дз есть задание на сортировку по строкам).
Дополнительно: игра “Жизнь”

60.В задачах на двумерные массивы сначала создается массив заполненный случайными числами и выводится на экран.
61.Показать двумерный массив размером m×n заполненный целыми случайными числами
62.Показать двумерный массив размером m×n заполненный вещественными случайными числами
63.В двумерном массиве n×k заменить четные элементы на противоположные по значению (a[i,j]=-a[i,j]). Написать отдельную подпрограмму на вход которой подается массив, а на выходе измененный массив.
64.Создать подпрограмму Create2DArray(m,n), которая возвращает двумерный массив следующим правилом: Aij = i+j, где i и j - индексы элементов массива, а m и n - размеры массива
65.В двумерном массиве заменить элементы, у которых оба индекса чётные на их квадраты по значению.
66.Написать подпрограмму, поиска элемента в двумерном массиве, подпрограмма возвращает позицию числа. Если элемент отсутствует, подпрограмма возвращает -1.
67.Написать подпрограмму, которая в квадратной матрице чисел находит сумму элементов главной диагонали
68.Дан целочисленный массив. Найти среднее арифметическое каждого из столбцов.
69.Написать программу, которая обменивает элементы первой строки и последней строки
Задача 68A: Задайте прямоугольный двумерный массив. Напишите программу, которая будет находить строку с наименьшей суммой элементов.
Например, задан массив:
1 4 7 2
5 9 2 3
8 4 2 4
5 2 6 7
Программа считает сумму элементов в каждой строке и выдаёт номер строки с наименьшей суммой элементов: 1 строка
 
Написать программу, упорядочивания по убыванию элементы каждой строки двумерной массива.
Например, задан массив:
1 4 7 2
5 9 2 3
8 4 2 4
В итоге получается вот такой массив:
1 2 4 7
2 3 5 9
2 4 4 8
 
Lesson 7. Рекурсия
Базовые алгоритмы: цикл через рекурсию, факториал через рекурсию, числа Фиббоначи, сумма цифр через рекурсию, возведение в степень, через рекурсию, НОД через рекурсию.

Решать задачи с использованием рекурсии.

70.Показать натуральные числа от 1 до N, N задано
71.Показать натуральные числа от N до 1, N задано
72.Показать натуральные числа от M до N, N и M заданы
73.Найти сумму элементов от M до N, N и M заданы
74.Найти сумму цифр числа
75.Написать программу вычисления функции Аккермана - 5*
76.Написать программу возведения числа А в целую степень B
77.Написать программу показывающие первые N чисел, для которых каждое следующее равно сумме двух предыдущих. Первые два элемента последовательности 0 и 1 
 
8. 7866 м. Почувствуй себя крутым (char, string)
Разбор задач (78, 75)
Базовые алгоритмы: частотный массив, разбор задачи 78, решение задачи на полиндром, разбор задачи на abc и cab

80. Вывести на экран кодировку символов по ASCII(с 32 до 122)
81. Вывести на экран символы от A до Z как показано ниже: 
A 
BB 
CCC 
...

82. C клавиатуры вводится строка разделенная точкой. Подсчитать количество символов до точки

83. Подсчитать количество цифр среди вводимых с клавиатуры символов

84. Определить являются ли введенные с клавиатуры символы правильно записью целого числа. Вычислить сумму цифр введенного числа

85. Преобразовать во вводимой с клавиатуры строке строчные латинские буквы в прописные

86. Подсчитать сколько раз определенный символ (например 'a') встречается в строке.

87. Удалить среднюю букву при нечетное длине строки и две средние буквы при четной длине строки

88. Заменить все вхождения подстроки w в строке st на строку v. Вывести на экран первоначальную строку и конечную строку

89. Подсчитать сумму цифр, встречающихся в строке
89A. ***В некотором машинном алфавите имеются четыре буквы «а», «и», «с» и «в». Покажите все слова (слова не обязательно осмысленные), состоящие из n букв, которые можно построить из букв этого алфавита. Здесь используется рекурсия.

9. 8849 м. Финиш
Делегаты, лямбда-выражения, Linq, разбор сложных задач.

90. Есть два массива info и data.
Массив data состоит из нулей и единиц хранящий числа в двоичном представлении. Числа идут друг за другом без разделителей.
Массив info состоит из чисел, которые представляют количество бит чисел из массива data.
Составить массив десятичных представлений чисел массива data с учётом информации из массива info.
Пример:
входные данные:
data = {0, 1, 1, 1, 1, 0, 0, 0, 1 }
info = {2, 3, 3, 1 }

выходные данные:
1, 7, 0, 1
 
Какие ошибки могут возникнуть при обработке наборов данных?
91. Даны два слова, можно ли из букв одного слова составить другое слово
АБВГ - БГВА


92. Написать программу, которая в двумерном массиве заменяет строки на столбцы или сообщить, что это невозможно (в случае, если матрица не квадратная).
Задача 58A: Задайте две матрицы. Напишите программу, которая будет находить произведение двух матриц.
Например, заданы 2 массива:
1 4 7 2
5 9 2 3
8 4 2 4
5 2 6 7
и
1 5 8 5
4 9 4 2
7 2 2 6
2 3 4 7
Их произведение будет равно следующему массиву:
1 20 56 10
20 81 8 6
56 8 4 24
10 6 24 49
 
В прямоугольной матрице найти строку с наименьшей суммой элементов.
Составить частотный словарь элементов двумерного массива состоящих из чисел от 0 до 99.
Частотный словарь содержит информацию о том, сколько раз встречается элемент входных данных.
Пример: Есть набор данных
{ 1, 9, 9, 0, 2, 8, 0, 9 }
 
частотный массив может быть представлен так:
0 встречается 2 раза
1 встречается 1 раз
2 встречается 1 раз
8 встречается 1 раз
9 встречается 3 раза
 
Если набор данных - таблица
1, 2, 3
4, 6, 1
2, 1, 6
 
на выходе ожидаем получить
1 встречается 3 раза
2 встречается 2 раз
3 встречается 1 раз
4 встречается 1 раз
6 встречается 2 раза
 
Пример частотного массива для текстовых данных: Входные данные:
Частотный анализ – это один из методов криптоанализа, основывающийся на предположении о существовании нетривиального статистического распределения отдельных символов и их последовательностей как в открытом тексте, так и шифрованном тексте, которое с точностью до замены символов будет сохраняться в процессе шифрования и дешифрования.
Частотный анализ может выглядеть так
Символ пробел/space встречается 41 раз. Частота 12.28%
Символ о встречается 38 раз.  Частота 11.38%
Символ и встречается 26 раз.  Частота 7.78%
Символ т встречается 25 раз.  Частота 7.49%
Символ е встречается 23 раза. Частота 6.89%
Символ с встречается 21 раз.  Частота 6.29%
Символ н встречается 20 раз.  Частота 5.99%
Символ а встречается 20 раз.  Частота 5.99%
Символ в встречается 16 раз.  Частота 4.79%
Символ р встречается 12 раз.  Частота 3.59%
Символ л встречается 10 раз.  Частота 2.99%
Символ к встречается 9 раз.   Частота 2.69%
Символ д встречается 9 раз.   Частота 2.69%
Символ п встречается 6 раз.   Частота 1.80%
Символ я встречается 6 раз.   Частота 1.80%
Символ м встречается 6 раз.   Частота 1.80%
Символ ь встречается 5 раз.   Частота 1.50%
Символ ы встречается 5 раз.   Частота 1.50%
Символ з встречается 4 раза.  Частота 1.20%
Символ х встречается 3 раза.  Частота 0.90%
Символ ш встречается 3 раза.  Частота 0.90%
Символ ф встречается 3 раза.  Частота 0.90%
Символ ч встречается 3 раза.  Частота 0.90%
Символ й встречается 3 раза.  Частота 0.90%
Символ , встречается 3 раза.  Частота 0.90%
Символ щ встречается 2 раза.  Частота 0.60%
Символ ю встречается 2 раза.  Частота 0.60%
Символ у встречается 2 раза.  Частота 0.60%
Символ г встречается 2 раза.  Частота 0.60%
Символ ж встречается 1 раз.   Частота 0.30%
Символ э встречается 1 раз.   Частота 0.30%
Символ – встречается 1 раз.   Частота 0.30%
Символ б встречается 1 раз.   Частота 0.30%
Символ ц встречается 1 раз.   Частота 0.30%
Символ . встречается 1 раз.   Частота 0.30%
 
95. Сформируйте трёхмерный массив из неповторяющихся двузначных чисел. Напишите программу, которая будет построчно выводить массив, добавляя индексы каждого элемента.
массив размером 2 x 2 x 2
12(0,0,0) 22(0,0,1)
45(1,0,0) 53(1,0,1)
 
url
96. Найти произведение двух матриц
97. В двумерном массиве целых чисел. Удалить строку и столбец, на пересечении которых расположен наименьший элемент.
Задача 62A. Заполните спирально массив 4 на 4.
Например, на выходе получается вот такой массив:
1    2    3   4
12 13 14 5
11 16 15 6
10   9   8   7
 
98. Сформировать трехмерный массив неповторяющимися двузначными числами показать его построчно на экран выводя индексы соответствующего элемента
99. Показать треугольник Паскаля *Сделать вывод в виде равнобедренного треугольника
100. Спирально заполнить двумерный массив:
 1  2  3  4
 12 13 14  5
 11 16 15  6
 10  9  8  7 

101. Есть число N. Сколько групп M, можно получить при разбиении всех чисел на группы, так чтобы в одной группе все числа были взаимно просты.
Например для N = 50, M получается 6
Одно из решений :
Группа 1: 1 
Группа 2: 2 3 11 13 17 19 23 29 31 37 41 43 47 
Группа 3: 4 6 9 10 14 15 21 22 25 26 33 34 35 38 39 46 49 
Группа 4: 8 12 18 20 27 28 30 42 44 45 50 
Группа 5: 7 16 24 36 40 
Группа 6: 5 32 48
 
Ещё одно решение:
Группа 1: 1 
Группа 2: 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 
Группа 3: 4 6 9 10 14 15 21 22 25 26 33 34 35 38 39 46 49 
Группа 4: 8 12 18 20 27 28 30 42 44 45 50 
Группа 5: 16 24 36 40 
Группа 6: 32 48

 
Задача: найти M при заданном N и получить одно из разбиений на группы N ≤ 10²⁰


List<List<int>> data = new List<List<int>>();//Создаем список списков (аналог двумерного массива, но переменной длины)
List<int> list = new List<int>();//Создаем список содержащий 1
list.Add(1);
data.Add(list);//добавляем этот список в список списков


bool Check(int n, List<int> list)//проверяем на наличее делителей в этом списке для числа n
{

    foreach (int i in list)
        if (n % i == 0) return true;
    return false;

    //То же самое с использование методов расширения
    //return list.Where(i => n % i == 0).Any();
}


void Print()
{
    int j = 0;
    foreach (List<int> list in data)
    {
        Console.Write((j++) +" ");
        foreach (int i in list) Console.Write(i+" ");
        Console.WriteLine();
    }
    


}

int N = 50;
for (int i = 2; i <= N; i++)//организуем перебор чисел
{
    bool isListFinded = false;
    for (int j = 0; j < data.Count && !isListFinded; j++)//просматриваем в каком списке нет делителей
        if (!Check(i, data[j]))//если в списке j нет делителей нашего числа,
        {
            data[j].Add(i);//то добавляем это число к списку
            isListFinded = true;
            break;//прекращаем перебирать списки и переходим к следующему числу
        }
    if (!isListFinded)
    {
        //если же во всех списках нашелся делитель        
        //то добавляем новый список и туда заносим число
        List<int> newList = new List<int>();//пустой список
        newList.Add(i);
        data.Add(newList);
        //Прекращаем искать делители
    }  
}
Print();


Версия 2


List<List<int>> data = new List<List<int>>();
List<int> list = new List<int>();
list.Add(1);
data.Add(list);

bool Check(int n, List<int> list)
{
    foreach (int i in list)
        if (n % i == 0) return true;
    ////for (int i=0;i<list.Count;i++)
    ////    if (n%list[i]==0) return true;
    return false;

    //return list.Where(i => n % i == 0).Any();
}

System.Diagnostics.Stopwatch stopwatch= new System.Diagnostics.Stopwatch();
stopwatch.Start();
int N = 1000000;
for(int i=2;i<=N;i++)
{
    bool isListFinded = false;
    for(int j=0;j<data.Count && !isListFinded;j++)
        if(!Check(i, data[j]))
        {
            data[j].Add(i);
            isListFinded = true;
            break;
        }
    if (!isListFinded)
    {
        List<int> newList = new List<int>();
        newList.Add(i);
        data.Add(newList);
    }

}
stopwatch.Stop();
Print();
Console.WriteLine(stopwatch.Elapsed.TotalSeconds);

void Print()
{
    int j = 0;
    foreach (List<int> list in data)
    {
        Console.Write((++j) + " ");
        foreach (int i in list) Console.Write(i + " ");
        Console.WriteLine();
    }

}

